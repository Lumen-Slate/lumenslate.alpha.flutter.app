import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_web_plugins/url_strategy.dart';
import 'package:lumen_slate/repositories/ai/context_generator.dart';
import 'package:lumen_slate/repositories/ai/question_segmentation_repository.dart';
import 'package:lumen_slate/repositories/ai/variation_generator.dart';
import 'package:lumen_slate/router/router.dart';
import 'package:responsive_framework/responsive_framework.dart';

import 'blocs/assignment/assignment_bloc.dart';
import 'blocs/auth/auth_bloc.dart';
import 'blocs/chat_agent/chat_agent_bloc.dart';
import 'blocs/classroom/classroom_bloc.dart';
import 'blocs/context_generation/context_generation_bloc.dart';
import 'blocs/mcq/mcq_bloc.dart';
import 'blocs/mcq_variation_generation/mcq_variation_bloc.dart';
import 'blocs/msq/msq_bloc.dart';
import 'blocs/msq_variation_generation/msq_variation_bloc.dart';
import 'blocs/question_bank/question_bank_bloc.dart';
import 'blocs/question_segmentation/question_segmentation_bloc.dart';
import 'blocs/questions/questions_bloc.dart';
import 'blocs/rag_agent/rag_agent_bloc.dart';
import 'blocs/rag_document/rag_document_bloc.dart';
import 'blocs/student/student_bloc.dart';
import 'constants/app_constants.dart'; // App name constant
import 'cubit/phone_form/phone_number_form_cubit.dart';
import 'firebase_options.dart'; // Generated by FlutterFire CLI
import 'repositories/ai/agent_repository.dart';
import 'repositories/ai/rag_agent_repository.dart';
import 'repositories/assignment_repository.dart';
import 'repositories/classroom_repository.dart';
import 'repositories/mcq_repository.dart';
import 'repositories/msq_repository.dart';
import 'repositories/nat_repository.dart';
import 'repositories/question_bank_repository.dart';
import 'repositories/student_repository.dart';
import 'repositories/subjective_repository.dart';
import 'repositories/teacher_repository.dart';
import 'services/email_auth_services.dart';
import 'services/google_auth_services.dart';
import 'services/phone_auth_services.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // For clean URLs on web
  usePathUrlStrategy();

  runApp(const AppInitializer());
}

class AppInitializer extends StatefulWidget {
  const AppInitializer({super.key});

  @override
  State<AppInitializer> createState() => _AppInitializerState();
}

class _AppInitializerState extends State<AppInitializer> {
  bool _isInitialized = false;

  @override
  void initState() {
    super.initState();
    _initializeApp();
  }

  Future<void> _initializeApp() async {
    // Small delay to ensure Firebase is fully ready
    await Future.delayed(const Duration(milliseconds: 100));

    if (mounted) {
      setState(() {
        _isInitialized = true;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    if (!_isInitialized) {
      return MaterialApp(
        home: Scaffold(
          body: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [CircularProgressIndicator(), SizedBox(height: 16), Text('Initializing LumenSlate...')],
            ),
          ),
        ),
      );
    }

    return const LumenSlate();
  }
}

class LumenSlate extends StatelessWidget {
  const LumenSlate({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiRepositoryProvider(
      providers: [
        RepositoryProvider(
          create: (context) => GoogleAuthService()..initialize(clientId: AppConstants.googleSingInClientId),
        ),
        RepositoryProvider(create: (context) => PhoneAuth()),
        RepositoryProvider(create: (context) => EmailAuthService()),
        RepositoryProvider(create: (context) => AIRepository()),
        RepositoryProvider(create: (context) => VariationRepository()),
        RepositoryProvider(create: (context) => QuestionSegmentationRepository()),
        RepositoryProvider(create: (context) => MCQRepository()),
        RepositoryProvider(create: (context) => MSQRepository()),
        RepositoryProvider(create: (context) => NATRepository()),
        RepositoryProvider(create: (context) => SubjectiveRepository()),
        RepositoryProvider(create: (context) => TeacherRepository()),
        RepositoryProvider(create: (context) => QuestionBankRepository()),
        RepositoryProvider(create: (context) => AgentRepository()),
        RepositoryProvider(create: (context) => ClassroomRepository()),
        RepositoryProvider(create: (context) => AssignmentRepository()),
        RepositoryProvider(create: (context) => RagAgentRepository()),
        RepositoryProvider(create: (context) => StudentRepository()),
      ],
      child: MultiBlocProvider(
        providers: [
          BlocProvider(
            create: (context) => AuthBloc(
              googleAuthServices: RepositoryProvider.of<GoogleAuthService>(context),
              teacherRepository: RepositoryProvider.of<TeacherRepository>(context),
              phoneAuthServices: RepositoryProvider.of<PhoneAuth>(context),
              emailAuthService: RepositoryProvider.of<EmailAuthService>(context),
            ),
          ),
          BlocProvider(create: (context) => PhoneNumberFormCubit()),
          BlocProvider(
            create: (context) => ContextGeneratorBloc(
              RepositoryProvider.of<AIRepository>(context),
              RepositoryProvider.of<MCQRepository>(context),
              RepositoryProvider.of<MSQRepository>(context),
              RepositoryProvider.of<NATRepository>(context),
              RepositoryProvider.of<SubjectiveRepository>(context),
            ),
          ),
          BlocProvider(create: (context) => MCQVariationBloc(RepositoryProvider.of<VariationRepository>(context))),
          BlocProvider(create: (context) => MSQVariationBloc(RepositoryProvider.of<VariationRepository>(context))),
          BlocProvider(
            create: (context) =>
                QuestionSegmentationBloc(RepositoryProvider.of<QuestionSegmentationRepository>(context)),
          ),
          BlocProvider(create: (context) => MCQBloc(RepositoryProvider.of<MCQRepository>(context))),
          BlocProvider(create: (context) => MSQBloc(RepositoryProvider.of<MSQRepository>(context))),
          BlocProvider(
            create: (context) => QuestionsBloc(
              mcqRepository: RepositoryProvider.of<MCQRepository>(context),
              msqRepository: RepositoryProvider.of<MSQRepository>(context),
              natRepository: RepositoryProvider.of<NATRepository>(context),
              subjectiveRepository: RepositoryProvider.of<SubjectiveRepository>(context),
            ),
          ),
          BlocProvider(
            create: (context) => QuestionBankBloc(repository: RepositoryProvider.of<QuestionBankRepository>(context)),
          ),
          BlocProvider(create: (context) => ChatAgentBloc(repository: RepositoryProvider.of<AgentRepository>(context))),
          BlocProvider(
            create: (context) => RagAgentBloc(repository: RepositoryProvider.of<RagAgentRepository>(context)),
          ),
          BlocProvider(
            create: (context) => ClassroomBloc(repository: RepositoryProvider.of<ClassroomRepository>(context)),
          ),
          BlocProvider(
            create: (context) => AssignmentBloc(repository: RepositoryProvider.of<AssignmentRepository>(context)),
          ),
          BlocProvider(
            create: (context) =>
                RagDocumentBloc(ragAgentRepository: RepositoryProvider.of<RagAgentRepository>(context)),
          ),
          BlocProvider(create: (context) => StudentBloc(repository: RepositoryProvider.of<StudentRepository>(context))),
        ],
        child: MaterialApp.router(
          title: AppConstants.appName,
          debugShowCheckedModeBanner: false,
          theme: ThemeData(colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple), useMaterial3: true),
          routerConfig: router,
          builder: (context, child) => BlocListener<AuthBloc, AuthState>(
            listenWhen: (previous, current) => previous != current,
            listener: (context, state) {
              if (state is AuthNotSignedIn) {
                router.go('/');
              }
            },
            child: ResponsiveBreakpoints.builder(
              child: child!,
              breakpoints: const [
                Breakpoint(start: 0, end: 450, name: MOBILE),
                Breakpoint(start: 451, end: 800, name: TABLET),
                Breakpoint(start: 801, end: 1920, name: DESKTOP),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
